# -*- coding: utf-8 -*-
"""main

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oifj3wiqnu4e5NKtj7KmKdPCF0mZwi_1
    SAI
"""

import numpy as np
import pandas as pd
import datetime

# df = pd.read_csv ('CGMData.csv')
# print(df)



CGM_data_extractor = pd.read_csv('CGMData.csv')
CGM_data_extractor.rename({'Sensor Glucose (mg/dL)': 'Gluco-(mg/dL)'}, axis=1, inplace=True)
 

Insulin_data_extractor = pd.read_csv('InsulinData.csv')

CGM_data_extractor['datetime'] = pd.to_datetime(CGM_data_extractor['Date']+" "+CGM_data_extractor['Time'])
Insulin_data_extractor['datetime'] = pd.to_datetime(Insulin_data_extractor['Date']+" "+Insulin_data_extractor['Time'])


auto_mode_info = Insulin_data_extractor[Insulin_data_extractor['Alarm']=='AUTO MODE ACTIVE PLGM OFF']


auto_mode_time = auto_mode_info.iloc[-1]['datetime']

# auto_mode_time = auto_mode_info.iloc[-1]['Time']

# auto_mode_time = pd.to_datetime(str(auto_mode_da) +" "+str(auto_mode_tim))


# print(CGM_data_extractor)
# print(Insulin_data_extractor)
print(auto_mode_time)


CGM_auto_mode = CGM_data_extractor[CGM_data_extractor["datetime"]>=auto_mode_time]
CGM_manual_mode = CGM_data_extractor[CGM_data_extractor["datetime"]<auto_mode_time]

CGM_auto_mode.loc["Date"] = pd.to_datetime(CGM_auto_mode["Date"])
CGM_auto_mode.loc["Time"] = pd.to_datetime(CGM_auto_mode["Time"])

CGM_manual_mode.loc["Date"] = pd.to_datetime(CGM_manual_mode["Date"])
CGM_manual_mode.loc["Time"] = pd.to_datetime(CGM_manual_mode["Time"])


# print(CGM_auto_mode, CGM_manual_mode )



CGM_auto_daytime = CGM_auto_mode[CGM_auto_mode['datetime'].dt.hour>=6].copy()
CGM_auto_overnight = CGM_auto_mode[CGM_auto_mode['datetime'].dt.hour<6].copy()
CGM_manual_daytime = CGM_manual_mode[CGM_manual_mode['datetime'].dt.hour>=6].copy()
CGM_manual_overnight = CGM_manual_mode[CGM_manual_mode['datetime'].dt.hour<6].copy()




def mean(dataset, days):
    total = dataset.groupby(by='Date')['Time'].count()
    if(len(total) == 0):
      return 0.0 
    summ = (total/288)*100
    return (summ.sum()/days)



manual = [CGM_manual_overnight, CGM_manual_daytime, CGM_manual_mode]
auto = [CGM_auto_overnight, CGM_auto_daytime,  CGM_auto_mode]
results =[[], []]




def metricextractor(dataset, flag):
  if flag == 'manual':
    j = 0
  else:
    j = 1
  for evaluating_data in dataset:
      days = evaluating_data['Date'].nunique()
      results[j].append(mean(evaluating_data[evaluating_data['Gluco-(mg/dL)']>180], days))
      results[j].append(mean(evaluating_data[evaluating_data['Gluco-(mg/dL)']>250], days))
      results[j].append(mean(evaluating_data[(evaluating_data['Gluco-(mg/dL)']>=70) & (evaluating_data['Gluco-(mg/dL)']<=180)], days))
      results[j].append(mean(evaluating_data[(evaluating_data['Gluco-(mg/dL)']>=70) & (evaluating_data['Gluco-(mg/dL)']<=150)], days))
      results[j].append(mean(evaluating_data[evaluating_data['Gluco-(mg/dL)']<70], days))
      results[j].append(mean(evaluating_data[evaluating_data['Gluco-(mg/dL)']<54], days))
  results[j].append(1.1)



metricextractor(auto, "auto")
metricextractor(manual, "manual")

df = pd.DataFrame(results)
print(results)

df
df.to_csv('Results.csv',index=False, header= False)

"""# New Section"""